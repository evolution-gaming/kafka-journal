evolutiongaming.kafka-journal.persistence {

  journal {

    class = "akka.persistence.kafka.journal.KafkaJournal"

    plugin-dispatcher = "evolutiongaming.kafka-journal.persistence.dispatcher"

    persistence-id-to-key {
      impl = "constant-topic"  # valid values: constant-topic, split
      constant-topic {
        topic = "journal"
      }
    }

    kafka {
      client-id = "journal"
      receive-buffer-bytes = 1000000 // 1mb
      send-buffer-bytes = 1000000 // 1mb

      // see com.evolutiongaming.skafka.consumer.ProducerConfig
      producer {
        acks = "all"
        linger = 1ms
        compression-type = "lz4"
        idempotence = true
      }

      // see com.evolutiongaming.skafka.consumer.ConsumerConfig
      consumer {
        group-id = "journal"
        max-poll-records = 1000
        auto-offset-reset = "earliest"
        auto-commit = false
      }
    }

    cassandra {
      client {
        name = "journal"
        query {
          fetch-size = 1000
          consistency = "LOCAL_QUORUM"
          default-idempotence = true
        }
      }
    }

    circuit-breaker {
      max-failures = 100
      call-timeout = 130s // should be higher than producer.delivery-timeout
      reset-timeout = 1m
    }

    json-codec = default

    # Configuration for the dynamic pool of Kafka consumers used on recovery in case the data is not yet replicated to
    # Cassandra
    consumer-pool {
      # Defines max pool size = multiplier x number of cores.
      # If a calculated max pool size is below 1, the size of 1 is used to avoid starting with an unusable consumer pool
      # configuration.
      # Multiplier value could be fractional.
      multiplier = 10

      # if idle for this time, Kafka consumers are closed
      idle-timeout = 1min
    }

    data-integrity {
      # On recovery, if true, duplicated sequence numbers in events will cause a JournalError `Data integrity violated`
      seq-nr-uniqueness = true

      # On recovery, if true, events with record IDs different from the one in the current metadata record
      # will be filtered out and logged as an error
      correlate-events-with-meta = false
    }
  }

  dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 4
      parallelism-factor = 1
      parallelism-max = 32
    }
  }
}