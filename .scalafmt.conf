# Main goals:
# - nicer commit diffs (trailing commas, no alignment for pattern matching, force new lines)
# - better interop with default IntelliJ IDEA setup (matching import and modifiers sorting logic)
# - better developer experience on laptop screens (like 16' MBPs) with IntelliJ IDEA (line wraps)

version = 3.9.6

runner.dialect = scala213source3

# only format files tracked by git
project.git = true

maxColumn = 120
trailingCommas = always

preset = default
# do not align to make nicer commit diffs
align.preset = none

indent {
  # altering defnSite and extendSite to have this:
  #   final class MyErr extends RuntimeException(
  #     "super error message",
  #   )
  # instead of this:
  #   final class MyErr extends RuntimeException(
  #       "super error message",
  #     )
  defnSite = 2
  extendSite = 0
}

spaces {
  # makes string interpolation with curlies more visually distinct
  inInterpolatedStringCurlyBraces = true
}

newlines {
  # keep author new lines where possible
  source = keep
  # force new line after "(implicit" for multi-line arg lists
  implicitParamListModifierForce = [after]
  avoidForSimpleOverflow = [
    tooLong, # if the line would be too long even after newline inserted, do nothing
    slc, # do nothing if overflow caused by single line comment
  ]
}

verticalMultiline {
  atDefnSite = true
  arityThreshold = 4 # more than 3 args in a list will be turned vertical
  newlineAfterOpenParen = true # for nicer commit diffs
}

# for nicer commit diffs - forces new line before last parenthesis:
#   class MyCls(
#     arg1: String,
#     arg2: String,
#   ) extends MyTrait {
#
# without it:
#   class MyCls(
#     arg1: String,
#     arg2: String) extends MyTrait {
danglingParentheses.exclude = []

docstrings {
  # easier to view diffs in IDEA on 16' MBP screen if docs max line are shorter than code
  wrapMaxColumn = 100
  # next settings make it similar to the default IDEA javadoc formatting
  style = Asterisk
  oneline = unfold
  blankFirstLine = unfold
}

rewrite.rules = [
  Imports,
  RedundantParens,
  SortModifiers,
  prefercurlyfors,
]

# put visibility modifier first
rewrite.sortModifiers.preset = styleGuide

# Import sorting as similar as possible to scalafix's "OrganizeImports.preset = INTELLIJ_2020_3".
# Scalafix is not used as its commands mess up "all .." build aliases and it takes long time to run,
# while its code semantic based features are not needed here.
# I.e. detection of unused imports is done with Scala compiler options.
rewrite.imports {
  sort = ascii
  groups = [
    [".*"],
    ["java\\..*", "javax\\..*", "scala\\..*"],
  ]
}
